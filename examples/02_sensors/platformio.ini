; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


; eagle.flash.512k0.ld 512K (no LittleFS)
; eagle.flash.512k64.ld 512K (64K LittleFS)
; eagle.flash.512k128.ld 512K (128K LittleFS)
; eagle.flash.1m0.ld 1M (no LittleFS)
; eagle.flash.1m64.ld 1M (64K LittleFS)
; eagle.flash.1m128.ld 1M (128K LittleFS)
; eagle.flash.1m144.ld 1M (144K LittleFS)
; eagle.flash.1m160.ld 1M (160K LittleFS)
; eagle.flash.1m192.ld 1M (192K LittleFS)
; eagle.flash.1m256.ld 1M (256K LittleFS)
; eagle.flash.1m512.ld 1M (512K LittleFS)
; eagle.flash.2m.ld 2M (1M LittleFS)
; eagle.flash.4m1m.ld 4M (1M LittleFS)
; eagle.flash.4m2m.ld 4M (2M LittleFS)
; eagle.flash.4m.ld 4M (3M LittleFS)
; eagle.flash.8m.ld 8M (7M LittleFS)
; eagle.flash.16m.ld 16M (15M LittleFS)

[platformio]
; comment out line below to compile all environments
default_envs = esp8266_release_debug
extra_configs =
  user_*.ini

[extra]
build_flags =
    ; !python git_rev_macro.py
    -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY_LOW_FLASH
    -DIFACE_DYN_JSON_SIZE=2048
    -DSMALL_JSON_SIZE=768
    ;-D__CFGSIZE=3072
    -DEMBUI_DEBUG
    -DEMBUI_USE_FTP
    -DUSE_SSDP
    -DEXTERNAL_SSDP
    -D__SSDPNAME='EmbUITest'
    -D__SSDPURLMODEL='https://github.com/DmytroKorniienko/EmbUI'
    -D__SSDPMODEL='https://github.com/DmytroKorniienko/'
    -D__SSDPURLMANUF='https://github.com/DmytroKorniienko/EmbUI'
    -D__SSDPMANUF='kDn'
    ; -D__DISABLE_BUTTON0
    -Wl,-gc-sections
    -DVTABLES_IN_FLASH
    -ffunction-sections
    -fdata-sections

[extra32]
build_flags =
    ; !python git_rev_macro.py
    -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY_LOW_FLASH
    ; -DIFACE_DYN_JSON_SIZE=2048
    ; -DSMALL_JSON_SIZE=768
    ;-D__CFGSIZE=3072
    -DEMBUI_DEBUG
    -DEMBUI_USE_FTP
    -DUSE_SSDP
    -DEXTERNAL_SSDP
    -D__SSDPNAME='EmbUITest'
    -D__SSDPURLMODEL='https://github.com/DmytroKorniienko/EmbUI'
    -D__SSDPMODEL='https://github.com/DmytroKorniienko/'
    -D__SSDPURLMANUF='https://github.com/DmytroKorniienko/EmbUI'
    -D__SSDPMANUF='kDn'
    ; -D__DISABLE_BUTTON0
    -Wl,-gc-sections
    -DVTABLES_IN_FLASH
    -ffunction-sections
    -fdata-sections 

[env]
framework = arduino
board_build.filesystem = littlefs
lib_deps =
    https://github.com/DmytroKorniienko/EmbUI.git@2.4.6
upload_speed = 460800
;monitor_speed = 460800
monitor_speed = 115200 ; must be same as BAUD_RATE (main.h)
monitor_flags =
  --quiet
  --echo
  --eol
    LF
;   --filter
;     colorize
  --filter
    time

[env:esp8266_release]
platform = espressif8266
board = d1_mini
build_flags =
    ${env.build_flags}
board_build.ldscript = eagle.flash.4m2m.ld
monitor_filters = esp8266_exception_decoder
extra_scripts = replace_fs.py

; ESP8266 debug version
[env:esp8266_release_debug]
platform = espressif8266
board = nodemcuv2
build_flags =
    -DPUB_PERIOD=30 ; публикация значений время/память - каждые 30 секунд
    ${extra.build_flags}
lib_deps =
    ${env.lib_deps}
board_build.ldscript = eagle.flash.4m2m.ld
monitor_filters = esp8266_exception_decoder
;build_type = debug ;

; ESP8266 debug version from dev
[env:esp8266_dev_debug]
platform = espressif8266
;platform = espressif8266@2.6.3
board = nodemcuv2
framework = arduino
board_build.filesystem = littlefs
lib_deps =
    https://github.com/DmytroKorniienko/EmbUI.git#dev
board_build.ldscript = eagle.flash.4m2m.ld
upload_speed = 460800
build_flags =
    -DPUB_PERIOD=30 ; публикация значений время/память - каждые 30 секунд
    ${extra.build_flags}
monitor_filters = esp8266_exception_decoder
;build_type = debug ;

[env:esp32]
platform = espressif32
board = wemos_d1_mini32
build_flags =
    ${extra32.build_flags}
    -DCONFIG_LITTLEFS_FOR_IDF_3_2
    -DUSE_LittleFS
lib_deps =
    ${env.lib_deps}
    https://github.com/lorol/LITTLEFS.git
monitor_filters = esp32_exception_decoder
extra_scripts = replace_fs.py
; to build and upload littlefs image it is required to install additional executable as described at https://github.com/lorol/LITTLEFS
